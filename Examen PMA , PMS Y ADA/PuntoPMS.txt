

2 - 
Resolver con PMS el siguiente problema: Se debe administrar el acceso para usar en determinado Servidor donde no se permite más de 10 usuarios trabajando al mismo tiempo, por cuestiones de rendimiento. 
Existen N usuarios que solicitan acceder al Servidor, esperan hasta que se les de acceso para trabajar en él y luego salen del mismo.
Nota: suponga que existe una función TrabajarEnServidor() que llaman los usuarios para representar que están trabajando en el Servidor


Process Servidor{
    id_prox : integer;
    for i=0; i<N; i++ {
        Admin!pedido();
        Admin?proximo(id_prox);
        Usuario[id_prox]!Utilizar();
    }
}


Process Usuario[id:1..N]{

    Admin!llegada(id);
    Servidor?Utilizar();
    TrabajarEnServidor()
    Admin!Termine()
}

Process Admin{
    cola Usuarios;
    contador : integer;
    id_u : integer;
    contador = 0;

    do Usuario[*]?llegada(id_u) ==> 
        usuarios.push(id_u);
    [] contador<10 and !usuarios.isEmpty();
        Servidor?pedido() ==>
            Servidor!proximo(usuarios.pop());
            contador++;
    [] Usuario[*]?Termine() ==>
        contador--;    
    od

}




2- Resolver con PASAJE DE MENSAJES SINCRÓNICO (PMS).


En una estación de comunicaciones se cuenta con 10 Radares, UNA Unidad de Detección, y UN Reconocedor.

Cada radar repetidamente detecta señales de radio durante 15 segundos y le envía esos datos a la Unidad de Detección para que los analice. 

Los radares no deben esperar ningún resultado (deben volver a tomar señales lo antes posible). 

La Unidad de Detección, toma de a una las señales enviadas por los radares (según el orden de llegada), 
realiza un preprocesamiento para limpiar la señal (simular esta operación mediante la función PREPROCESAR(señal)) 
y envía el resultado al Reconocedor para que termine de analizar la señal (simular esta operación mediante la función ANALIZAR(señal)) 
y se queda esperando el resultado de este análisis para determinar el resultado final. Nota: Maximizar la concurrencia.







Process radar[id:1..10]{
    Señal :señal
    while true{
        Señal = obtenerSeñal(DELAY(15));
        Detección!SeñalRecibida(Señal);
    }
}

Process Detección{
    Señal : señal;
    result:string;
    
    Admin!llegar();
    Admin?Enviar(Señal);
    PREPROCESAR(Señal);
    Reconocedor!EnviarSeñal(Señal);
    Reconocedor?RecibirResultado(result);
}

Process Reconocedor{
    señalAnalizar:señal;
    do Detección?Enviar(señalAnalizar) ==>
        ANALIZAR(señalAnalizar);
        Detección?RecibirResultado(señalAnalizar);
}
 
Process Admin{
    señales:cola;

    deteccionLibre = true;
        
    do radar[*]?SeñalRecibida(Señal) ==>
            señales.push(Señal);
        [] !señales.isEmpty() Detección?llegar() ==>
            Detección!Enviar(señales.pop())
    od;
    }


   
