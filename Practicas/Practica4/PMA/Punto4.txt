4. Simular la atención en un locutorio con 10 cabinas telefónicas, el cual tiene un empleado
que se encarga de atender a N clientes. Al llegar, cada cliente espera hasta que el empleado
le indique a qué cabina ir, la usa y luego se dirige al empleado para pagarle. El empleado
atiende a los clientes en el orden en que hacen los pedidos, pero siempre dando prioridad a
los que terminaron de usar la cabina. A cada cliente se le entrega un ticket factura. Nota:
maximizar la concurrencia; suponga que hay una función Cobrar() llamada por el empleado
que simula que el empleado le cobra al cliente.


chan llegada(int)
chan pagos(int,int)
chan hayPedido(boolean)
chan ticket[1..C](string)

Process Cliente[id: 1..C]{
    int cabina
    string ticket
    send llegada(id)
    send hayPedido();
    receive Cabina[id](cabina)
    //usa cabina
    send termine(id,cabina)
    send hayPedido()
    receive ticket[id](ticket)
}

Process Empleado{
    int idCliente
    boolean hay
    int idCabina
    Cola cabinas
    
    InicializarColaCabina(cabinas) //Carga la cola con las cabinas

    while(true){
        receive hayPedido(hay)
        if(!pagos.isEmpty() || cabinas.isEmpty()){
            receive pagos(idCliente,idCabina)
            cabinas.push(idCabina)
            send ticket[idCliente](Cobrar())
        }
        else{
            receive llegada(idCliente)
            send Cabina[idCliente](cabinas.pop())
        }
        

    } 


}

