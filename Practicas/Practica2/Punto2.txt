2. Un sistema de control cuenta con 4 procesos que realizan chequeos en forma
colaborativa. Para ello, reciben el historial de fallos del día anterior (por simplicidad, de
tamaño N). De cada fallo, se conoce su número de identificación (ID) y su nivel de
gravedad (0=bajo, 1=intermedio, 2=alto, 3=crítico). Resuelva considerando las siguientes
situaciones:


a) Se debe imprimir en pantalla los ID de todos los errores críticos (no importa el
orden).

int N;
indiceAcceso = 0;
ArrayFallos = [N];

// PRECONDICION: N ES DIVISIBLE POR   4
Procces Chequeos[id: 0..3]{
    int division = N / 4;
    int limiteInferior = division * id;
    int limiteSuperior = limiteInferior + division - 1;
    for (int i = limiteInferior; i <= limiteSuperior;i++)
	System.out.println(arrayFallos[i].getId());
}


b) Se debe calcular la cantidad de fallos por nivel de gravedad, debiendo quedar los
resultados en un vector global.


int [] cantidadFallos = [4];
Arrays.fill(cantidadFallos,0);
sem mutex = 1;
int indiceAcceso = 0;
Fallos [] arrayFallos = [N];

Process Chequeos[id:0..3] {
	int [] vector = [4];
	Arrays.fill(vector, 0);
	int division = N / 4;
    	int limiteInferior = division * id;
    	int limiteSuperior = limiteInferior + division - 1;
	for (int i = limiteInferior; i < limiteSuperior; i++) {
		vector[arrayFallos[i].getGravedad()]++;	
	}
	P(mutex);
	for (int i =0; i < 4; i++)
		cantidadFallos[i]+=vector[i];
	V(mutex);
	
}


c) Ídem b) pero cada proceso debe ocuparse de contar los fallos de un nivel de
gravedad determinado



int [] cantidadFallos = [4];
Arrays.fill(cantidadFallos,0);
Fallos [] arrayFallos = [N];

Process Chequeos[id:0..3] {
	int cantidad=0; 
	for (int i =0;i<N;i++) {
		if (id == arrayFallos[i].getGravedad())
			cantidad++;
	}
	cantidadFallos[id]=cantidad;
}
