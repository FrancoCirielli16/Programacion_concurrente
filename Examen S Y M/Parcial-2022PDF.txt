1. Resolver con SEMÁFOROS el siguiente problema. En una planta verificadora de vehículos, existen 7 estaciones donde 
se  dirigen  150  vehículos  para  ser  verificados.  Cuando  un  vehículo  llega  a  la  planta,  el  coordinador  de la  planta  le 
indica a qué estación debe dirigirse. El coordinador selecciona la estación que tenga menos vehículos asignados en ese 
momento. Una vez que el vehículo sabe qué estación le fue asignada, se dirige a la misma y espera a que lo llamen 
para verificar. Luego de la revisión, la estación le entrega un comprobante que indica si pasó la revisión o no. Más allá 
del resultado, el vehículo se retira de la planta. Nota: maximizar la concurrencia.


sem comenzar[1..150] = ([150],0);
sem espera[1..7] = ([7],0)
sem avisar = 0
sem mutex_cola = 1
sem mutex_estaciones[1..7] = ([7],1)
sem arrayContador = 1


array contador[1..7] = ([7], 0)
cola auto;
array estaciones[1..150];
array comprobante[1..150];

cola [1..7] cola_estaciones



Procces Vehículos[id:1..150]{
    P(mutex_cola);
    auto.push(id);
    V(mutex_cola);

    V(avisar);

    P(comenzar[id])
    miEstacion = estaciones[id];
    //SE DIRIGE A ESTACION
    P(mutex_estaciones[miEstacion]);
    cola_estaciones[miEstacion].push(id);
    V(mutex_estaciones[miEstacion]);

    V(espera[miEstacion]);
    
    P(verificar[id]);

    P(termino[id])
    miComprobante = comprobante[id];
    P(arrayContador)
    contador[miEstacion]--;
    V(arrayContador)
}



Procces estaciones[id:1..7]{
    while true{
        P(espera[id])
    
        P(mutex_estaciones[id]);
        auto = cola_estaciones[id].pop();
        V(mutex_estaciones[id]);

        V(verificar[auto]);
        
        //se revisa
        comprobante[auto] = revisar();
        V(termino[auto])
    }
    
}


Procces Coordinador{
    for i=0; i<150; i++ {
        P(avisar)
        P(mutex_cola)
        vehículo = auto.pop();
        V(mutex_cola)
       
        
        P(arrayContador);
        estacion = min(contador)
        contador[estacion]++;
        V(arrayContador);
        
        estaciones[vehículo] = estacion;
        
        V(comenzar[vehículo]);

    }
}




2. Resolver  con  MONITORES  el  siguiente  problema.  En  un  sistema  operativo  se  ejecutan  20 procesos  que 
periódicamente  realizan  cierto  cómputo  mediante  la  función  Procesar().  Los  resultados  de  dicha  función  son 
persistidos en un archivo, para lo que se requiere de acceso al subsistema de E/S. Sólo un proceso a la vez puede hacer 
uso  del  subsistema  de  E/S,  y el  acceso  al mismo se define  por  la  prioridad  del  proceso (menor  valor indica mayor 
prioridad).



Monitor sistema{

    colaOrdenada procesos
    cond espera[20]
    libre = true
    esperando = 0

    Procedure solicitar(id,prioridad){
        if(not libre){
            esperando++;
            procesos.insertarOrdenado(id,prioridad);
            wait (espera[id]);
        }else{
            libre = false;
        }
    }


    Procedure salir(){
        if(esperando>0){
            proximo = procesos.pop();
            signal(espera[proximo]);
            esperando--;
        }else{
            libre = true;
        }
    }
}


Procces Proceso[id:1..20]{
    prioridad = obtenerPrioridad();
    while true{
        resultado = Procesar();
        sistema.solicitar(id,prioridad);
        Guardar(resultado);
        sistema.salir();
    }
}