Parcial de concurrente 2013 - 1° Fecha

1 - Resolver con semáforos el siguiente problema: 

Un sistema de software está compuesto por un proceso CENTRAL y un conjunto de los procesos periféricos donde cada uno de ellos realiza una determinada operación especial (cuyo resultado es un valor entero) 
El proceso CENTRAL debe esperar a que todos los procesos periféricos se hayan iniciado para poder comenzar. 
Una vez que el proceso central comenzó a trabajar, cada vez que necesita realizar alguna de las 10 operaciones especiales avisa al correspondiente periférico para que realice el trabajo y espera a que le devuelva el resultado.
Nota: Suponga que existe una función int TrabajoProcesoCentral() que simula el trabajo del proceso CENTRAL y devuelve un valor entero entre 1 y 10, que indica cual de las 10 operaciones debe realizar en ese momento.

iniciado = 0

sem mutex = 1
sem todos = 0
sem comenzar[1..P] = ([P],0);
array int tarea[1..P] = ([P],0)
cola t
sem mutex_cola = 1
Procces periférico[id:1..P]{

    P(mutex)
    iniciado++
    if(iniciado == P){
        V(todos)
    }
    V(mutex)
    
    P(comenzar[id])
    //Hacer algo para la central
    V(fin)


    
}

Procces CENTRAL{
    P(todos)
    while true {
        V(comenzar[TrabajoProcesoCentral()])
        P(fin)
        // Hacer algo con el resultado
    }
    
}


2 -Se debe administrar el acceso para usar en determinado Servidor donde no se permite más de 10 usuarios trabajando al mismo tiempo, por cuestiones de rendimiento. 
Existen N usuarios que solicitan acceder al Servidor, esperan hasta que se les de acceso para trabajar en él y luego salen del mismo.
Nota: suponga que existe una función TrabajarEnServidor() que llaman los representar que están trabajando en el Servidor

#OPCION A PREGUNTAR


Monitor Servidor {

    int usuarios_actuales = 0;
    cond espera;
    cond usuarios;

    Procedure IngresarUsuario() {
        if (not libre)and(usuarios_actuales >= 10) {
            wait(espera);
        }
        libre = false;
        usuarios_actuales++;
    }

    Procedure SalirUsuario() {
        if (usuarios_actuales > 0) {
            usuarios_actuales--;
            signal(usuarios);
        } 
        else {
            libre = true;
        }
    }

   
}

Process Usuario[id: 1..N] {
    Servidor.IngresarUsuario();  
    TrabajarEnServidor();      
    Servidor.SalirUsuario();    
}

Process Administrador {
    Servidor.Administrar();  
}
